/*-------------------------------------------------------*\
 *   Sass Functions
 */

@function get-percentage($size, $width: 12)
  @return $size / $width * 100%

@function is-quoted($string)
  @if type-of($string) != string
    @return false

  @return "#{unquote('#{$string}""')}" != $string

@function maybe-unquote($val)
  @if is-quoted($val) == true
    @return unquote($val)
  @else
    @return $val

@function maybe-quote($val)
  @if is-quoted($val) == true
    @return $val
  @else
    @return quote($val)

@function multiply($value-one, $value-two)
  @return $value-one * $value-two

@function divide($value-one, $value-two)
  @return $value-one / $value-two

@function subtraction($value-one, $value-two)
  @return $value-one - $value-two

@function addition($value-one, $value-two)
  @return $value-one + $value-two

@function negative($value)
  @return $value * -1

// @function vw($target) {
//     $vw-context: 1000 * 0.01 * 1px;

//     @return $target / $vw-context * 1vw;
// }

/**
 ** Convert fonts
@function fontisize($value, $current-unit, $convert-unit: px)
  @if $current-unit == px
    @if $convert-unit == em
      @return $value / 16 + 0em
    @else if $convert-unit == percent
      @return percentage($value / 16)
  @else if $current-unit == em
    @if $convert-unit == px
      @return $value * 16 + 0px
    @else if $convert-unit == percent
      @return percentage($value)
  @else if $current-unit == percent
    @if $convert-unit == px
      @return $value * 16 / 100 + 0px
    @else if $convert-unit == em
      @return $value / 100 + 0em
  @else if $current-unit == pt
    @if $convert-unit == px
      @return $value * 1.3333 + 0px
    @else if $convert-unit == em
      @return $value / 12 + 0em
    @else if $convert-unit == percent
      @return percentage($value / 12)

@function solid-lighten($color, $percentage)
  @return lighten($color, (1 - $percentage) * 5%)

@function solid-darken($color, $percentage)
  @return darken($color, (1 - $percentage) * 5%)

=rgba($type, $color, $percentage, $shade: ligthen)
  @if $shade == lighten
    @if $type == color
      color: solid-lighten($color, $percentage)
      color: rgba($color, $percentage)

    @if $type == bg
      background-color: solid-lighten($color, $percentage)
      background-color: rgba($color, $percentage)
  @else
    @if $type == color
      color: solid-darken($color, $percentage)
      color: rgba($color, $percentage)

    @if $type == bg
      background-color: solid-darken($color, $percentage)
      background-color: rgba($color, $percentage)

/*  Removes a specific item from a list.
/*  @author Hugo Giraudel
/*  @param {list} $list List.
/*  @param {integer} $index Index.
/*  @return {list} Updated list.
@function remove-nth($list, $index)
  $result: null

  @if type-of($index) != number
    @warn "$index: #{quote($index)} is not a number for `remove-nth`."
  @else if $index == 0
    @warn "List index 0 must be a non-zero integer for `remove-nth`."
  @else if abs($index) > length($list)
    @warn "List index is #{$index} but list is only #{length($list)} item long for `remove-nth`."
  @else
    $result: ()
    $index: if($index < 0, length($list) + $index + 1, $index)

    @for $i from 1 through length($list)
      @if $i != $index
        $result: append($result, nth($list, $i))

  @return $result

/*  Gets a value from a map.
/*  @author Hugo Giraudel
/*  @param {map} $map Map.
/*  @param {string} $keys Key(s).
/*  @return {string} Value.
@function vals($map, $keys...)
  @if nth($keys, 1) == null
    $keys: remove-nth($keys, 1)

  @each $key in $keys
    $map: map-get($map, $key)

  @return $map

/*  Gets a value from a map.
/*  @author Hugo Giraudel
/*  @param {map} $map Map.
/*  @param {string} $keys Key(s).
/*  @param {mixed} $fallback Fallback value if null is returned
/*  @return {string} Value.
@function val($map, $keys, $fallback: false)
  $returnval: vals($map, $keys) or $fallback

  // @debug $returnval;
  @return $returnval

// /*  Gets a duration value.
// /*  @param {string} $keys Key(s).
// /*  @return {string} Value.
// @function _duration($keys...) {
//     @return vals($duration, $keys...);
// }

// /*  Gets a font value.
// /*  @param {string} $keys Key(s).
// /*  @return {string} Value.
// @function _font($keys...) {
//     @return vals($font, $keys...);
// }

// /*  Gets a misc value.
// /*  @param {string} $keys Key(s).
// /*  @return {string} Value.
// @function _misc($keys...) {
//     @return vals($misc, $keys...);
// }

// /*  Gets a palette value.
// /*  @param {string} $keys Key(s).
// /*  @return {string} Value.
// @function _palette($keys...) {
//     @return vals($palette, $keys...);
// }

// /*  Gets a size value.
// /*  @param {string} $keys Key(s).
// /*  @return {string} Value.
// @function get-size($keys...) {
//     @return vals($size, $keys...);
// }

// /*  Gets a padding value.
// /*  @param {string} $keys Key(s).
// /*  @return {string} Value.
// @function pad($keys: default) {
//     // $keys: (default) !default;
//     // @debug $keys;
//     @return val($pad, $keys...);
// }

// /*  Gets a styles value.
// /*  @param {string} $keys Key(s).
// /*  @return {string} Value.
// @function style($keys: default) {
//     // $keys: (default) !default;
//     // @debug $keys;
//     @return maybe-unquote(vals($styles, $keys...));
// }

// /*  Gets a breakpoint value.
// /*  @param {string} $keys Key(s).
// /*  @return {string} Value.
// @function break-val($keys...) {
//     @return vals($breaks, $keys...);
// }

// @function break($key, $unit: 'px') {
//     $bp: break-val($key);
//     @return #{$bp + maybe-unquote($unit)};
// }

/**
 * Cross-browser text-stroke hack
 *
 * @param $size
 * @param $color - default is white
 * @param $correction - 0
@function text-stroke($size: 2, $color: #fff, $correction: 0)
  $radius: $size - $correction
  $stroke: ()

  @for $i from -$size through $size
    @for $k from -$size through $size
      $x: $k
      $y: $i

      @if $k > 0
        $x: $k - 0.5
      @else if $k < 0
        $x: $k + 0.5

      @if $i > 0
        $y: $i - 0.5
      @else if $i < 0
        $y: $i + 0.5

      @if $x * $x + $y * $y <= $radius * $radius
        $stroke: append($stroke, ($i * 1px) ($k * 1px) 0 $color, comma)

  @return $stroke

@function is-number($value)
  @return type-of($value) == "number"

@function is-time($value)
  @return is-number($value) and index("ms" "s", unit($value)) != null

@function is-duration($value)
  @return is-time($value)

@function is-angle($value)
  @return is-number($value) and index("deg" "rad" "grad" "turn", unit($value)) != null

@function is-frequency($value)
  @return is-number($value) and index("Hz" "kHz", unit($value)) != null

@function is-integer($value)
  @return is-number($value) and round($value) == $value

@function is-relative-length($value)
  @return is-number($value) and index("em" "ex" "ch" "rem" "vw" "vh" "vmin" "vmax", unit($value)) != null

@function is-absolute-length($value)
  @return is-number($value) and index("cm" "mm" "in" "px" "pt" "pc", unit($value)) != null

@function is-percentage($value)
  @return is-number($value) and unit($value) == "%"

@function is-length($value)
  @return is-relative-length($value) or is-absolute-length($value)

@function is-resolution($value)
  @return is-number($value) and index("dpi" "dpcm" "dppx", unit($value)) != null

@function is-position($value)
  @return is-length($value) or is-percentage($value) or index("top" "right" "bottom" "left" "center", $value) != null
